// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("APP_DATABASE_URL")
}

// Add custom models here
enum UserType {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserProjectType {
  ADMIN
  MEMBER
}

model User {
  id        Int           @id @default(autoincrement())
  email     String        @unique
  password  String?
  firstName String?
  lastName  String?
  phone     String?
  bio       String?       @default("")
  type      UserType      @default(USER)
  status    UserStatus    @default(INACTIVE)
  createdAt DateTime      @default(now()) @db.Timestamptz()
  updatedAt DateTime      @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime?     @db.Timestamptz()
  devices   Device[]
  tokens    Token[]
  medias    Media[]       @relation("MediaOwner")
  settings  UserSettings?
  oauth     UserOAuth?
  Media     Media?        @relation(fields: [mediaId], references: [id])
  mediaId   Int?
  todo      Todo[]
}

model UserSettings {
  id                   Int       @id @default(autoincrement())
  notificationsEnabled Boolean   @default(true)
  userId               Int       @unique
  user                 User      @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now()) @db.Timestamptz()
  updatedAt            DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deletedAt            DateTime? @db.Timestamptz()
}

model Todo {
  id        String    @id @default(uuid())
  title     String
  completed Boolean   @default(false)
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime? @db.Timestamptz()
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
}

enum DeviceType {
  WEB
  ANDROID
  IOS
}

model Device {
  id        Int        @id @default(autoincrement())
  uuid      String     @default(uuid())
  userAgent String?
  type      DeviceType @default(ANDROID)
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now()) @db.Timestamptz()
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime?  @db.Timestamptz()
}

enum TokenReason {
  FORGOT_PASSWORD
  RESET_PASSWORD
  VERIFICATION
  CHANGE_PASSWORD
}

model Token {
  id        Int         @id @default(autoincrement())
  uuid      String      @default(uuid())
  code      String
  reason    TokenReason
  userId    Int?
  createdAt DateTime    @default(now()) @db.Timestamptz()
  updatedAt DateTime    @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime?   @db.Timestamptz()
  user      User?       @relation(fields: [userId], references: [id])
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  ARCHIVE
  OTHER
}

enum MediaStatus {
  UPLOADING
  READY
  STALE
}

enum MediaAccess {
  PUBLIC
  PRIVATE
}

model Media {
  id        Int         @id @default(autoincrement())
  name      String
  extension String
  type      MediaType
  access    MediaAccess
  size      Float?
  location  String?
  path      String
  thumbPath String?
  status    MediaStatus @default(UPLOADING)
  meta      Json?       @db.JsonB
  userId    Int?
  createdAt DateTime    @default(now()) @db.Timestamptz()
  updatedAt DateTime    @default(now()) @updatedAt @db.Timestamptz()
  deletedAt DateTime?   @db.Timestamptz()
  user      User?       @relation("MediaOwner", fields: [userId], references: [id])
  users     User[]
}

enum UserOAuthType {
  GOOGLE
  APPLE
}

model UserOAuth {
  id         Int           @id @default(autoincrement())
  userId     Int           @unique
  providerId String
  type       UserOAuthType
  createdAt  DateTime      @default(now()) @db.Timestamptz()
  updatedAt  DateTime      @default(now()) @updatedAt @db.Timestamptz()
  deletedAt  DateTime?     @db.Timestamptz()
  user       User          @relation(fields: [userId], references: [id])
}
